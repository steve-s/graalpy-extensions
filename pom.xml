<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.graalvm.python</groupId>
  <artifactId>graalpy-extensions</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>
  <properties>
    <!-- NOTE: revision is special and one can change it from cmd line: `mvn -Drevision=... package` -->
    <!-- See https://maven.apache.org/guides/mini/guide-maven-ci-friendly.html -->
    <revision>26.0.0-SNAPSHOT</revision>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.polyglot.version>${revision}</project.polyglot.version>
    <!-- JAVA_HOME to be used for Gradle plugin build and for Gradle integration tests -->
    <gradle.java.home>${java.home}</gradle.java.home>
    <project.python.artifact>python-community</project.python.artifact>
    <project.junit.version>5.7.0</project.junit.version>
    <project.hamcrest.version>3.0</project.hamcrest.version>
    <integration.tests.args>--help</integration.tests.args>
  </properties>

  <developers>
    <developer>
      <name>GraalVM Development</name>
      <email>graalvm-dev@oss.oracle.com</email>
      <organization>Oracle Corporation</organization>
      <organizationUrl>http://www.graalvm.org/</organizationUrl>
    </developer>
  </developers>
  <licenses>
    <license>
      <name>Universal Permissive License, Version 1.0</name>
      <url>http://opensource.org/licenses/UPL</url>
    </license>
  </licenses>

  <modules>
    <module>graalpy-archetype-polyglot-app</module>
    <module>graalpy-maven-plugin</module>
    <module>org.graalvm.python.embedding</module>
    <module>org.graalvm.python.embedding.tools</module>
    <module>org.graalvm.python.jbang</module>
    <module>org.graalvm.python.gradle.plugin</module>
  </modules>

  <!-- javainterfacegen module is excluded on Windows -->
  <profiles>
    <profile>
      <id>javainterfacegen-unix</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <modules>
        <module>javainterfacegen</module>
      </modules>
    </profile>
  </profiles>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.graalvm.polyglot</groupId>
        <artifactId>polyglot</artifactId>
        <version>${project.polyglot.version}</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>org.graalvm.python</groupId>
        <artifactId>${project.python.artifact}</artifactId>
        <version>${project.polyglot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <version>${project.junit.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest</artifactId>
        <version>${project.hamcrest.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.12.1</version>
          <configuration>
            <source>21</source>
            <target>21</target>
            <release>21</release>
            <compilerArgs>
              <arg>-Xlint:all</arg>
              <arg>-Werror</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.5</version>
        </plugin>
        <!-- by default no JavaDoc linting, we override this in modules that provide public API -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.11.2</version>
          <configuration>
            <failOnError>false</failOnError>
            <additionalJOptions>
              <additionalJOption>-Xdoclint:none</additionalJOption>
            </additionalJOptions>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <!-- "flattens" the pom.xml (inherited by submodules, so also theirs) before publishing to Maven repository. -->
        <!-- Flattening resolves some placeholders, most importantly {revision} and removes the parent pom reference,
             so that we do not have to deploy the parent pom. -->
        <!-- See https://maven.apache.org/guides/mini/guide-maven-ci-friendly.html -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.7.1</version>
        <configuration>
          <flattenMode>ossrh</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- prevent deployment of the parent pom, intentionally not inherited by submodules -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.1.4</version>
        <inherited>false</inherited>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <!-- prevent installation of the parent pom, intentionally not inherited by submodules -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.1.4</version>
        <inherited>false</inherited>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <!-- Runs the integration tests through Maven passing some of the flags to the test driver automatically -->
        <!-- The tests are run on GraalPy to avoid dependency on python3 installed on the system -->
        <!-- One must run "mvn install" before running this goal -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <inherited>false</inherited>
        <executions>
          <execution>
            <id>integration-tests</id>
            <phase>none</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>com.oracle.graal.python.shell.GraalPythonMain</mainClass>
              <commandlineArgs>
                ${project.basedir}/integration-tests/run.py -v --gradle-java-home ${gradle.java.home} --graalpy-version ${project.polyglot.version} ${integration.tests.args}
              </commandlineArgs>
              <!-- Maven should pull all the dependencies, e.g., GraalPy itself, into local cache before running the integration tests,
                  so that the integration tests can just use local repo even if this Maven script uses some additional repositories
                  (e.g., via settings.xml) -->
              <includeProjectDependencies>true</includeProjectDependencies>
              <includePluginDependencies>true</includePluginDependencies>
            </configuration>
          </execution>
          <execution>
            <id>graalpy-shell</id>
            <phase>none</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>com.oracle.graal.python.shell.GraalPythonMain</mainClass>
              <includeProjectDependencies>true</includeProjectDependencies>
              <includePluginDependencies>true</includePluginDependencies>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.graalvm.python</groupId>
            <artifactId>${project.python.artifact}</artifactId>
            <version>${project.polyglot.version}</version>
            <type>pom</type>
          </dependency>
          <dependency>
            <groupId>org.graalvm.polyglot</groupId>
            <artifactId>${project.python.artifact}</artifactId>
            <version>${project.polyglot.version}</version>
            <type>pom</type>
          </dependency>
          <dependency>
            <groupId>org.graalvm.python</groupId>
            <artifactId>python-launcher</artifactId>
            <version>${project.polyglot.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.46.1</version>
        <configuration>
          <java>
            <eclipse/>
            <trimTrailingWhitespace/>
            <removeWildcardImports/>
            <!-- We cannot use the licenseHeader, because the spotless Maven plugin does not expose the yearSeparator property -->
          </java>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.9.3.0</version>
        <configuration>
          <excludeFilterFile>../configs/SpotBugsFilters.xml</excludeFilterFile>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
